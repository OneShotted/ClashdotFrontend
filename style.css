body {
  margin: 0;
  overflow: hidden;
  font-family: sans-serif;
}

#username-screen {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: #95d7ae;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  z-index: 10;
}

#game-title {
  font-size: 48px;
  margin-bottom: 20px;
}

#username-input {
  padding: 10px;
  font-size: 16px;
  margin: 10px;
}

#start-button {
  padding: 10px 20px;
  font-size: 16px;
}

#chat-container {
  position: fixed;
  bottom: 20px;
  left: 20px;
  width: 300px;
  max-height: 200px;
  background: rgba(255, 255, 255, 0.8);
  padding: 8px;
  border-radius: 8px;
  display: none;
  flex-direction: column;
}

#chat-log {
  flex: 1;
  max-height: 120px;
  overflow-y: auto;
  margin-bottom: 6px;
  font-size: 14px;
}

#chat-input {
  width: 70%;
  padding: 4px;
}

#send-chat {
  width: 28%;
  padding: 4px;
  margin-left: 2%;
}

#dev-panel {
  position: fixed;
  top: 20px;
  right: 20px;
  width: 300px;
  background: #fff8e1;
  padding: 10px;
  border: 2px solid #f0c36d;
  border-radius: 10px;
  display: none;
  z-index: 20;
}

#dev-player-list {
  max-height: 200px;
  overflow-y: auto;
  margin-bottom: 10px;
}

#dev-player-list div {
  margin-bottom: 4px;
}

#changelog {
  position: fixed;
  top: 20px;
  left: 20px;
  width: 300px;
  background: #f0f0f0;
  border-radius: 8px;
  padding: 10px;
  z-index: 15;
  font-size: 14px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

#changelog h2 {
  margin-top: 0;
}

.red-message {
  color: red;
  font-weight: bold;
}

#discord-button {
  position: fixed;
  top: 20px;
  left: 330px;
  width: 40px;
  height: 40px;
  z-index: 16;
}

#discord-button img {
  width: 100%;
  height: 100%;
}
 )
For render: server.js: (const WebSocket = require('ws');
const { v4: uuidv4 } = require('uuid');

const wss = new WebSocket.Server({ port: 8080 });
const players = {};
const sockets = {};

console.log('Server started on port 8080');

wss.on('connection', (ws) => {
  const id = uuidv4();
  sockets[id] = ws;

  ws.on('message', (message) => {
    let data;
    try {
      data = JSON.parse(message);
    } catch (err) {
      console.error('Invalid JSON:', message);
      return;
    }

    if (data.type === 'register') {
      let name = data.name;
      let isDev = false;
      if (name.includes('#1627')) {
        isDev = true;
        name = name.replace('#1627', '');
      }

      players[id] = {
        id,
        name,
        x: Math.random() * 1000,
        y: Math.random() * 1000,
        isDev
      };

      ws.send(JSON.stringify({ type: 'id', id }));
      broadcastState();
    }

    else if (data.type === 'movementState') {
      if (!players[id]) return;
      const speed = 3;
      const keys = data.keys || {};

      if (keys.up) players[id].y -= speed;
      if (keys.down) players[id].y += speed;
      if (keys.left) players[id].x -= speed;
      if (keys.right) players[id].x += speed;

      broadcastState();
    }

    else if (data.type === 'chat') {
      const player = players[id];
      if (!player) return;
      const messageToSend = {
        type: 'chat',
        name: player.name,
        message: data.message,
        isBroadcast: false
      };
      broadcast(messageToSend);
    }

    else if (data.type === 'devCommand') {
      const player = players[id];
      if (!player || !player.isDev) return;

      if (data.command === 'kick') {
        const targetId = data.targetId;
        if (players[targetId] && sockets[targetId]) {
          sockets[targetId].close();
          delete players[targetId];
          delete sockets[targetId];
          broadcastState();
        }
      }

      else if (data.command === 'teleport') {
        const targetId = data.targetId;
        const x = data.x || 0;
        const y = data.y || 0;
        if (players[targetId]) {
          players[targetId].x = x;
          players[targetId].y = y;
          broadcastState();
        }
      }

      else if (data.command === 'broadcast') {
        const message = data.message || '';
        const broadcastMessage = {
          type: 'chat',
          message: [Broadcast] ${message},
          isBroadcast: true
        };
        broadcast(broadcastMessage);
      }
    }
  });

  ws.on('close', () => {
    delete players[id];
    delete sockets[id];
    broadcastState();
  });
});

function broadcastState() {
  const state = {
    type: 'update',
    players
  };
  broadcast(state);
}

function broadcast(data) {
  const msg = JSON.stringify(data);
  Object.values(sockets).forEach((ws) => {
    if (ws.readyState === WebSocket.OPEN) {
      ws.send(msg);
    }
  });
} )
Package.json: ({
  "name": "io-game-server",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "ws": "^8.0.0",
    "uuid": "^9.0.0"
  }
}
